{"version":3,"sources":["./src/app/models.ts","./src/app/constants.ts","./src/app/pipes/sanitize-html.pipe.ts","./src/app/post/post.component.html","./src/app/post/post.component.ts","./src/app/feed/feed.component.html","./src/app/feed/feed.component.ts","./src/app/core.service.ts","./src/app/pipes/count.pipe.ts","./src/app/home/home.component.html","./src/app/app-routing.module.ts","./src/app/home/home.component.ts","./src/app/helpers.ts","./src/app/backward-compatibility.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/environments/environment.prod.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["SiteFeedAbout","Post","TABLES","SanitizeHtmlPipe","domSanitizer","v","this","bypassSecurityTrustHtml","PostComponent","post","hidden","typeAsString","enclosure","type","split","author","pubDate","readTime","filter","a","join","minutes","Math","round","content","toString","length","FeedComponent","dbService","router","route","posts","displayActions","viewCount","about","identify","index","id","slice","newPosts$","p","isNew","map","update","POSTS","concat","pipe","toArray","subscribe","postForDelete$","delete","params","tap","feedId","switchMap","getByID","FEEDS","feed","getAllByIndex","IDBKeyRange","only","reverse","debounceTime","markAsRead","deleteTail","confirm","forDelete$","navigate","ngOnInit","CoreService","http","feedLoading$","Subject","feedError$","url","forEach","add","next","get","encodeURI","siteFeed","updateFeed","addPosts","items","catchError","error","message","of","feedItems","requests$","feedItem","getNewPostsAndUpdateStore","CountPipe","filterPostFn","undefined","routes","path","component","HomeComponent","coreService","feeds","addFeedMode","godMode","rawFeedURLs","feedLoading","feedError","loading","ngUnsubscribe$","navigator","share","rawFeedStrings","newFeeds$","s","trim","URL","_","protocol","isValidHttpUrl","combineLatest","load","refreshFeeds","title","text","f","location","href","getAll","takeUntil","isLoadind","addFeeds","feedListSource","localStorage","getItem","removeItem","JSON","parse","importFeedsFromVersion3","serviceWorker","getRegistrations","then","registrations","registration","unregister","complete","AppRoutingModule","forRoot","useHash","AppComponent","dbConfig","name","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","AppModule","register","enabled","bootstrapModule","catch","err","console","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","exports"],"mappings":"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","file":"main.38d89e4b7c8f80b3dcf9.js","sourcesContent":["export interface Enclosure {\n    link?: string;\n    type?: string;\n    thumbnail?: string;\n    url?: string;\n    length?: number;\n}\n\nexport class FeedItem {\n    url: string;\n    id: number;\n    about?: SiteFeedAbout;\n}\n\nexport class SiteFeedAbout {\n    author: string;\n    description: string;\n    image: string;\n    link: string;\n    title: string;\n    url: string;\n}\n\nexport class SiteFeed {\n    static: string;\n    feed: SiteFeedAbout;\n    items: Post[];\n}\n\nexport class Post {\n    id?: number;\n    title: string;\n    pubDate?: string;\n    link: string;\n    guid: string;\n    author: string;\n    thumbnail: string;\n    description: string;\n    content: string;\n    categories: string[] | any;\n    enclosure: Enclosure;\n    isNew?: boolean;\n}\n\n","export enum TABLES {\n    FEEDS = 'feeds',\n    POSTS = 'posts'\n}\n\nexport const RSS2JSON = 'https://api.rss2json.com/v1/api.json?rss_url=';\n\nexport const DELAY200 = 200;\n\nexport const MAX_POSTS_COUNT = 99;\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n\n@Pipe({\n    name: 'sanitizeHtml'\n})\nexport class SanitizeHtmlPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(v: string): SafeHtml {\n        return this.domSanitizer.bypassSecurityTrustHtml(v);\n    }\n}\n","\n<div class=\"post-header\" *ngIf=\"hidden\">\n    <img *ngIf=\"post.thumbnail\"\n        class=\"post-header-thumbnail\"\n        [src]=\"post.thumbnail\" alt=\"thumbnail\">\n    <div class=\"post-header-text\">\n        <small class=\"short-info\">\n            {{shortInfo}}\n        </small>\n        <h3 (click)=\"hidden = !hidden\" [innerHTML]=\"post.title | sanitizeHtml\"></h3>\n    </div>\n\n    <button (click)=\"hidden = !hidden\"\n        [ngClass]=\"{green: post.isNew}\"\n        class=\"ml-auto a-button post-button\">️<img src=\"assets/expand.svg\" alt=\"Expand post\"></button>\n</div>\n\n<div class=\"post-header\" *ngIf=\"!hidden\">\n    <img *ngIf=\"post.thumbnail\"\n        class=\"post-header-thumbnail\"\n        [src]=\"post.thumbnail\" alt=\"thumbnail\">\n    <div class=\"post-header-text\">\n        <small class=\"short-info\">\n            {{shortInfo}}\n        </small>\n        <h3>\n            <a target=\"_blank\" [href]=\"post.link\" [innerHTML]=\"post.title | sanitizeHtml\"></a>\n            <sup> ↗</sup>\n        </h3>\n    </div>\n    <button (click)=\"hidden = !hidden\"\n        [ngClass]=\"{green: post.isNew}\"\n        class=\"ml-auto a-button post-button\"><img src=\"assets/unexpand.svg\" alt=\"Unexpand post\"></button>\n</div>\n<hr *ngIf=\"!hidden\">\n<div class=\"post-box\" *ngIf=\"!hidden\">\n    <div [innerHTML]=\"post.content | sanitizeHtml\"></div>\n</div>\n<div *ngIf=\"post?.categories?.length && !hidden\" class=\"small text-muted mb-1\">\n    <em *ngFor=\"let cat of post.categories; let last = last\">{{cat}}<span *ngIf=\"!last\">, </span></em>\n</div>\n\n<div *ngIf=\"post.enclosure?.thumbnail && !hidden\">\n    <a [href]=\"post.enclosure.link\" *ngIf=\"post.enclosure?.thumbnail\">\n        <img *ngIf=\"post.enclosure.thumbnail\" [src]=\"post.enclosure.thumbnail\" alt=\"thumbnail\">\n    </a>\n    <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n</div>\n\n<div *ngIf=\"isImage && !hidden\">\n    <img [src]=\"post.enclosure.link\" alt=\"thumbnail\">\n    <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n</div>\n\n\n<div *ngIf=\"!(post.enclosure?.thumbnail) && !hidden && post.enclosure?.url\">\n    <a [href]=\"post.enclosure.url\" target=\"_blank\">Enclosure<sup>↗️</sup></a>\n    <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n    <div *ngIf=\"post.enclosure?.length\">Length: {{post.enclosure?.length}}</div>\n</div>\n\n<!--<pre *ngIf=\"!hidden\">{{post.enclosure|json}}</pre>-->\n","import {Component, Input} from '@angular/core';\nimport {Post} from '../models';\n\n\n@Component({\n    selector: 'app-post',\n    templateUrl: './post.component.html'\n})\nexport class PostComponent {\n\n    @Input() post: Post = new Post();\n\n\n    hidden = true;\n\n    constructor() {\n    }\n\n    get isImage(): boolean {\n        const typeAsString = this.post?.enclosure?.type || '';\n        return typeAsString?.split('/')?.[0] === 'image';\n    }\n\n    get shortInfo(): string {\n        return [\n            this.post.author,\n            this.post.pubDate,\n            this.readTime\n        ].filter(a => a).join(', ');\n    }\n\n    get readTime(): string {\n        const minutes = Math.round(this.post.content.toString().length / 1500);\n\n        return minutes < 1 ? '' : `⏱ ~${minutes}m`;\n    }\n}\n","<div [ngClass]=\"{'active-actions': displayActions}\">\n    <div class=\"container\">\n        <div class=\"p-1\">\n            <div class=\"top-top-feed\">\n                <button\n                    (click)=\"displayActions = !displayActions\"\n                    class=\"a-button lh-20\">⚙</button>\n                <a routerLink=\"/\" class=\"ml-auto\">\n                    <img width=\"16\" src=\"assets/back.svg\" alt=\"Back to feeds\"> Back to feeds\n                </a>\n            </div>\n\n            <div class=\"mb-2 mt-1\" *ngIf=\"displayActions\">\n                <button (click)=\"deleteFeed()\" class=\"a-button red lh-20 mr-1\">Delete the feed</button>\n                <button (click)=\"removeAllPosts()\"\n                        *ngIf=\"posts.length > 0\"\n                        class=\"a-button red lh-20\">Remove all posts</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container\">\n\n\n    <table class=\"w-100\">\n\n        <tbody>\n            <tr>\n                <td class=\"feed-image\">\n                    <img\n                        onerror=\"this.src='assets/icon-72x72.png'\"\n                        [src]=\"about.image || 'assets/icon-72x72.png'\" alt=\"image\">\n                </td>\n                <td class=\"feed-about\">\n                    <div *ngIf=\"about.title\">\n                        <strong class=\"mr-1\">Title:</strong>\n                        <span>{{about.title}}</span>\n                    </div>\n                    <div *ngIf=\"about.author\">\n                        <strong class=\"mr-1\">Author:</strong>\n                        <span>{{about.author}}</span>\n                    </div>\n                    <div *ngIf=\"about.description\">\n                        <strong class=\"mr-1\">Description:</strong>\n                        <span>{{about.description}}</span>\n                    </div>\n                    <div *ngIf=\"about.link\">\n                        <strong class=\"mr-1\">Link:</strong>\n                        <a target=\"_blank\" href=\"{{about.link}}\">{{about.link}}</a>\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n\n\n\n    <div class=\"post-wrapper\" *ngFor=\"let post of viewPosts; trackBy:identify\">\n        <app-post [post]=post></app-post>\n    </div>\n\n    <div *ngIf=\"viewCount < posts.length\" class=\"feed-line p-1 pb-2\">\n        <button class=\"ml-auto a-button mr-auto\" (click)=\"showMore()\">\n            Show 10 more posts\n        </button>\n    </div>\n    <hr>\n\n    <div class=\"bottom-box\">\n        <img src=\"assets/favicon-32x32.png\">\n    </div>\n\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {debounceTime, map, switchMap, tap, toArray} from 'rxjs/operators';\nimport {NgxIndexedDBService} from 'ngx-indexed-db';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FeedItem, Post, SiteFeedAbout} from '../models';\nimport {concat} from 'rxjs';\nimport {MAX_POSTS_COUNT, TABLES} from '../constants';\n\n\n@Component({\n    selector: 'app-feed',\n    templateUrl: './feed.component.html',\n    styles: [`\n\n    `]\n})\nexport class FeedComponent implements OnInit {\n\n    posts: Post[] = [];\n    displayActions = false;\n    viewCount: number = 10;\n    about: SiteFeedAbout = new SiteFeedAbout();\n    private feedId: number;\n\n    identify = (index: number, post: Post) => post.id;\n\n    constructor(private dbService: NgxIndexedDBService,\n                private router: Router,\n                private route: ActivatedRoute) {\n    }\n\n    get viewPosts(): Post[] {\n        return this.posts.slice(0, this.viewCount);\n    }\n\n    showMore():void {\n        this.viewCount += 10;\n    }\n\n\n    markAsRead(): void {\n        const newPosts$ = this.posts.filter(p => p.isNew)\n            .map(post => this.dbService.update(TABLES.POSTS, {...post, isNew: false}));\n\n        concat(...newPosts$).pipe(toArray()).subscribe();\n    }\n\n    deleteTail(): void {\n        const postForDelete$ = this.posts.slice(MAX_POSTS_COUNT)\n            .map(post => this.dbService.delete(TABLES.POSTS, post.id));\n\n        concat(...postForDelete$).pipe(toArray()).subscribe();\n\n    }\n\n    ngOnInit(): void {\n        this.route.params\n            .pipe(\n                map(params => params.id),\n                tap(id => this.feedId = +id),\n                switchMap(id => this.dbService.getByID(TABLES.FEEDS, +id)),\n                tap((feed: FeedItem) => this.about = feed.about),\n                switchMap(feed => this.dbService.getAllByIndex(TABLES.POSTS, 'feedId', IDBKeyRange.only(this.feedId))),\n                tap((posts) => this.posts = posts?.reverse() || []),\n                debounceTime(200),\n                tap(() => this.markAsRead()),\n                debounceTime(200),\n                tap(() => this.deleteTail())\n            )\n            .subscribe();\n    }\n\n    deleteFeed(): void {\n        const result = confirm('Remove the feed?');\n        if (result === true) {\n\n            const forDelete$ = [\n                this.dbService.delete(TABLES.FEEDS, this.feedId),\n                ...this.posts.map(post => this.dbService.delete(TABLES.POSTS, post.id))\n            ];\n            concat(...forDelete$).pipe(toArray())\n                .subscribe(() => this.router.navigate(['/']));\n        }\n    }\n\n    removeAllPosts(): void {\n        const result = confirm('Remove all the posts?');\n        if (result === true) {\n            const postForDelete$ = this.posts\n                .map(post => this.dbService.delete(TABLES.POSTS, post.id));\n            concat(...postForDelete$).pipe(toArray())\n                .subscribe(() => this.ngOnInit());\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { concat, Observable, of, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, delay, switchMap, tap, toArray } from 'rxjs/operators';\nimport { FeedItem, Post, SiteFeed, SiteFeedAbout } from './models';\nimport { RSS2JSON, TABLES } from './constants';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoreService {\n\n\n    feedLoading$ = new Subject<[id: number, isLoading: boolean]>();\n    feedError$ = new Subject<[id: number, message: string]>();\n\n    constructor(private http: HttpClient, private dbService: NgxIndexedDBService) {\n    }\n\n    updateFeed(url: string, id: number, about: SiteFeedAbout): void {\n        this.dbService.update(TABLES.FEEDS, { url, id, about });\n    }\n\n    addPosts(posts: Post[], feedId: number): void {\n        posts.forEach((post) => {\n            this.dbService\n                .add(TABLES.POSTS, { ...post, feedId, isNew: true })\n                .subscribe();\n        });\n    }\n\n    getNewPostsAndUpdateStore(url: string, id: number): Observable<SiteFeed> {\n\n        this.feedLoading$.next([id, true]);\n\n        return this.http.get<SiteFeed>(encodeURI(`${RSS2JSON}${url}`))\n            .pipe(\n                tap(siteFeed => {\n                    this.updateFeed(url, id, siteFeed.feed);\n                    this.addPosts(siteFeed.items.reverse(), id);\n                    this.feedLoading$.next([id, false]);\n                }),\n                catchError(error => {\n                    this.feedLoading$.next([id, false]);\n                    this.feedError$.next([id, error.message || 'Error']);\n                    return of(null);\n                })\n            );\n    }\n\n    refreshFeeds(feedItems: FeedItem[]): Observable<SiteFeed[]> {\n        const requests$ = feedItems\n            .map(feedItem => this.getNewPostsAndUpdateStore(feedItem.url, feedItem.id));\n\n        return concat(...requests$).pipe(toArray());\n    }\n\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {NgxIndexedDBService} from 'ngx-indexed-db';\nimport {map} from 'rxjs/operators';\nimport {TABLES} from '../constants';\nimport {Observable} from 'rxjs';\nimport {Post} from '../models';\n\n\n@Pipe({\n    name: 'count'\n})\nexport class CountPipe implements PipeTransform {\n\n    constructor(private dbService: NgxIndexedDBService) {\n    }\n\n    transform(feedId: number, isNew?: boolean): Observable<number> {\n        const filterPostFn = (p: Post) => isNew === undefined || p.isNew === isNew;\n        return this.dbService.getAllByIndex(TABLES.POSTS, 'feedId', IDBKeyRange.only(feedId))\n            .pipe(map(posts => posts.filter(filterPostFn).length));\n    }\n}\n","<div class=\"container mb-3 mt-3\">\n\n    <table class=\"w-100\">\n        <tbody>\n        <tr>\n            <td>\n                <a routerLink=\"/\">\n                    <img alt=\"Stupid RSS Reader logo\" src=\"assets/fur-boot-green.svg\" style=\"width: 5rem\">\n                </a>\n            </td>\n            <td>\n                <h1 class=\"ml-2 app-name\">Stupid RSS Reader</h1>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,248,220,0.5)\">\n    <div class=\"feeds-header\">\n        <h2 class=\"mr-auto\">Feeds</h2>\n        <button class=\"a-button button-share mr-1\" (click)=\"share()\" *ngIf=\"shareIsSuported\" >\n            <img src=\"assets/share.svg\" alt=\"Share feeds\">\n        </button>\n        <button class=\"a-button green\"\n            [disabled]=\"loading\"\n            (click)=\"refreshFeeds()\">Refresh all feeds</button>\n    </div>\n\n    <div class=\"feed-line\" *ngFor=\"let feed of feeds; trackBy:identify\">\n        <div class=\"mr-1\">\n            <strong class=\"fit-text\">{{feed.about?.title || 'noname'}}</strong><br>\n            <small class=\"fit-text\">{{feed.url}}</small>\n            <div *ngIf=\"feedError[feed.id]\" style=\"color: #82280c\" class=\"fit-text\">\n                <small>💢 {{feedError[feed.id]}}</small>\n            </div>\n        </div>\n        <div class=\"ml-auto\" style=\"text-align: right;\">\n            <button class=\"a-button\"\n                    [disabled]=\"feedLoading[feed.id]\"\n                    style=\"width: 60px\"\n                    [routerLink]=\"['/', feed.id]\">\n                    <span class=\"spinner\" *ngIf=\"feedLoading[feed.id]\"></span>\n                    <span *ngIf=\"!feedLoading[feed.id]\">\n                        <sup class=\"new-info\" *ngIf=\"(feed.id | count:true | async) > 0\">\n                            +{{ feed.id | count:true | async }}\n                        </sup>\n                        {{(feed.id | count | async) || '-'}}\n                    </span>\n\n            </button>\n        </div>\n    </div>\n\n    <div *ngIf=\"!addFeedMode\" class=\"mt-1\">\n        <button class=\"a-button lh-20\" (click)=\"addFeedMode=true\">+ add</button>\n    </div>\n    <div>\n        <form *ngIf=\"addFeedMode\" class=\"pure-form pure-form-stacked\">\n            <fieldset>\n                <label for=\"new-feeds\">Enter new feed URLs</label>\n                <textarea class=\"pure-input-1\"\n                    [(ngModel)]=\"rawFeedURLs\"\n                    name=\"rawFeedURLs\"\n                    id=new-feeds\n                    [placeholder]=\"['https://example.com/feed1\\nhttps://example.com/feed2']\"></textarea>\n\n                <button type=\"button\"\n                    (click)=\"addFeeds(rawFeedURLs)\"\n                    class=\"a-button lh-20\">Add to the feeds</button>\n            </fieldset>\n        </form>\n    </div>\n</div>\n\n\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,235,205,0.5);\">\n    <h3>About</h3>\n    <p>I'm tired of different stupid RSS clients and I created own Stupid RSS Reader.</p>\n    <h4>Proxy for RSS</h4>\n    <p>\n        The application must use the proxy <a href=\"https://rss2json.com/\" target=\"_blank\">rss2json.com</a> because CORS restrictions on cross-site requests.\n    </p>\n\n    <h4>Features</h4>\n    <ul>\n        <li>Stupid RSS is <a href=\"https://developers.google.com/web/progressive-web-apps/\" target=\"_blank\">Progressive\n            Web App</a>\n        </li>\n        <li>You can install it to your smartphone</li>\n        <li>Very simple interface</li>\n        <li>Offline mode</li>\n        <li>All user data are stored locally only (<a href=\"https://developer.mozilla.org/ru/docs/Web/API/IndexedDB_API\" target=\"_blank\">IndexedDB</a>)</li>\n        <li>The last 99 posts are stored. Deletion occurs after downloading new ones</li>\n        <li>Open source: <a href=\"https://github.com/gurov/stupid-rss-reader\" target=\"_blank\">Github</a></li>\n    </ul>\n\n</div>\n\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,250,240,0.5)\">\n    <h3>Philosophy</h3>\n    <p>The application does not impose anything, but only executes orders.</p>\n</div>\n\n<div class=\"bottom-box\">\n    <img src=\"assets/favicon-32x32.png\" (click)=\"godMode = !godMode\">\n    <button *ngIf=\"godMode\"\n        (click)=\"unregister()\"\n        class=\"a-button red ml-1 lh-20\">Unregister SW</button>\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {FeedComponent} from './feed/feed.component';\nimport {HomeComponent} from './home/home.component';\n\n\nconst routes: Routes = [\n    {\n        path: ':id',\n        component: FeedComponent\n    },\n    {\n        path: '',\n        component: HomeComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {useHash: true})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {NgxIndexedDBService} from 'ngx-indexed-db';\nimport {combineLatest, Subject} from 'rxjs';\nimport {isValidHttpUrl} from '../helpers';\nimport {FeedItem} from '../models';\nimport {TABLES} from '../constants';\nimport {CoreService} from '../core.service';\nimport {takeUntil} from 'rxjs/operators';\nimport {importFeedsFromVersion3} from '../backward-compatibility';\n\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styles: []\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n\n    feeds: FeedItem[] = [];\n    addFeedMode: boolean = false;\n    godMode: boolean = false;\n    rawFeedURLs: string = '';\n    feedLoading: { [index: number]: boolean } = {};\n    feedError: { [index: number]: string } = {};\n    loading: boolean = false;\n    private ngUnsubscribe$ = new Subject<void>();\n\n    identify = (index: number, feed: FeedItem) => feed.id;\n\n    constructor(private dbService: NgxIndexedDBService,\n                private coreService: CoreService) {\n    }\n\n    get shareIsSuported(): boolean {\n        return !!navigator.share;\n    }\n\n    addFeeds(rawFeedStrings: string): void {\n        this.addFeedMode = false;\n        this.rawFeedURLs = '';\n        const newFeeds$ = rawFeedStrings\n            .split('\\n')\n            .map(s => s.trim())\n            .filter(s => s)\n            .filter(s => isValidHttpUrl(s))\n            .map(url => this.dbService.add(TABLES.FEEDS, {url}));\n\n        combineLatest(newFeeds$)\n            .subscribe(() => this.load());\n    }\n\n    refreshFeeds(): void {\n        this.loading = true;\n        this.feedError = {};\n        this.coreService.refreshFeeds(this.feeds)\n            .subscribe(() => {\n                this.loading = false;\n                this.load();\n            });\n    }\n\n    share(): void {\n        navigator.share?.({\n            title: 'Stupid RSS',\n            text: this.feeds.map(f => f.url).join(' \\n'),\n            url: location.href,\n        }); // share the URL of MDN\n    }\n\n    load(): void {\n        this.dbService.getAll(TABLES.FEEDS)\n            .subscribe(feeds => this.feeds = feeds);\n    }\n\n    ngOnInit(): void {\n        this.coreService.feedLoading$\n            .pipe(takeUntil(this.ngUnsubscribe$))\n            .subscribe(([id, isLoadind]) => this.feedLoading[id] = isLoadind);\n\n        this.coreService.feedError$\n            .pipe(takeUntil(this.ngUnsubscribe$))\n            .subscribe(([id, message]) => this.feedError[id] = message);\n\n        this.load();\n\n        // import from the old version\n        try {\n            this.addFeeds(importFeedsFromVersion3());\n        } catch (error) {\n        }\n\n\n    }\n\n    unregister(): void {\n        const result = confirm('Unregister the Service Worker?');\n        if (result === true) {\n            navigator.serviceWorker?.getRegistrations().then((registrations) => {\n                for (const registration of registrations) {\n                    registration.unregister();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n\n}\n","export const isValidHttpUrl = (s: string) => {\n    let url;\n\n    try {\n        url = new URL(s);\n    } catch (_) {\n        return false;\n    }\n\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n}","export function importFeedsFromVersion3(): string {\n    const feedListSource = localStorage.getItem('feedList');\n    localStorage.removeItem('feedList');\n    try {\n        return JSON.parse(feedListSource).join('\\n');\n    } catch (error) {\n        return '';\n    }\n}","import {Component} from '@angular/core';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    title = 'stupid-rss-reader';\n}\n","<div>\n    <router-outlet></router-outlet>\n</div>\n","export const environment = {\n    production: true\n};\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {DBConfig, NgxIndexedDBModule} from 'ngx-indexed-db';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {FeedComponent} from './feed/feed.component';\nimport {HomeComponent} from './home/home.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {SanitizeHtmlPipe} from './pipes/sanitize-html.pipe';\nimport {FormsModule} from '@angular/forms';\nimport {PostComponent} from './post/post.component';\nimport {CountPipe} from './pipes/count.pipe';\nimport {ServiceWorkerModule} from '@angular/service-worker';\nimport {environment} from '../environments/environment';\n\n\nconst dbConfig: DBConfig = {\n    name: 'Stupid-RSS-Reader',\n    version: 1,\n    objectStoresMeta: [\n        {\n            store: 'posts',\n            storeConfig: {keyPath: 'id', autoIncrement: true},\n            storeSchema: [\n                {name: 'title', keypath: 'title', options: {unique: false}},\n                {name: 'feedId', keypath: 'feedId', options: {unique: false}},\n                {name: 'pubDate', keypath: 'pubDate', options: {unique: false}},\n                {name: 'link', keypath: 'link', options: {unique: false}},\n                {name: 'guid', keypath: 'guid', options: {unique: true}},\n                {name: 'author', keypath: 'author', options: {unique: false}},\n                {name: 'thumbnail', keypath: 'thumbnail', options: {unique: false}},\n                {name: 'description', keypath: 'description', options: {unique: false}},\n                {name: 'content', keypath: 'content', options: {unique: false}},\n                {name: 'categories', keypath: 'categories', options: {unique: false}},\n                {name: 'enclosure', keypath: 'enclosure', options: {unique: false}},\n                {name: 'isNew', keypath: 'isNew', options: {unique: false}},\n            ]\n        },\n        {\n            store: 'feeds',\n            storeConfig: {keyPath: 'id', autoIncrement: true},\n            storeSchema: [\n                {name: 'url', keypath: 'url', options: {unique: true}},\n            ]\n        }\n    ]\n};\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        FeedComponent,\n        PostComponent,\n        CountPipe,\n        SanitizeHtmlPipe\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        RouterModule,\n        AppRoutingModule,\n        NgxIndexedDBModule.forRoot(dbConfig),\n        ServiceWorkerModule.register('/stupid-rss-reader/ngsw-worker.js', { enabled: environment.production })\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}