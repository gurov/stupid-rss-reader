{"version":3,"sources":["./src/app/models.ts","./src/app/constants.ts","./src/app/pipes/sanitize-html.pipe.ts","./src/app/post/post.component.html","./src/app/post/post.component.ts","./src/app/feed/feed.component.html","./src/app/feed/feed.component.ts","./src/app/core.service.ts","./src/app/home/home.component.html","./src/app/app-routing.module.ts","./src/app/home/home.component.ts","./src/app/helpers.ts","./src/app/backward-compatibility.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/environments/environment.prod.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["SiteFeedAbout","Post","TABLES","SanitizeHtmlPipe","domSanitizer","v","this","bypassSecurityTrustHtml","PostComponent","post","hidden","typeAsString","enclosure","type","split","author","pubDate","readTime","filter","a","join","minutes","Math","round","content","toString","length","FeedComponent","dbService","router","route","posts","displayActions","viewCount","about","identify","index","id","slice","feed","update","FEEDS","newCount","subscribe","newPosts$","p","isNew","map","POSTS","concat","pipe","toArray","postForDelete$","delete","params","tap","feedId","switchMap","getByID","markAsReadFeed","getAllByIndex","IDBKeyRange","only","reverse","debounceTime","markAsReadPosts","deleteTail","confirm","forDelete$","navigate","ngOnInit","CoreService","http","feedLoading$","BehaviorSubject","feedError$","isLoadind","feedLoading","getValue","next","feedError","url","combineLatest","add","catchError","of","count","feedItem","setFeedLoading","get","encodeURI","siteFeed","addPosts","items","error","setFeedError","message","feedItems","requests$","getNewPostsAndUpdateStore","routes","path","component","HomeComponent","coreService","feeds","addFeedMode","godMode","rawFeedURLs","loading","ngUnsubscribe$","Subject","navigator","share","rawFeedStrings","newFeeds$","s","trim","URL","_","protocol","isValidHttpUrl","load","refreshFeeds","title","text","f","location","href","getAll","takeUntil","addFeeds","feedListSource","localStorage","getItem","removeItem","JSON","parse","importFeedsFromVersion3","serviceWorker","getRegistrations","then","registrations","registration","unregister","complete","AppRoutingModule","forRoot","useHash","AppComponent","dbConfig","name","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","migrationFactory","2","db","transaction","objectStore","createIndex","AppModule","register","enabled","bootstrapModule","catch","err","console","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","exports"],"mappings":"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","file":"main.72db1674d37ffd41e716.js","sourcesContent":["export interface Enclosure {\n    link?: string;\n    type?: string;\n    thumbnail?: string;\n    url?: string;\n    length?: number;\n}\n\nexport type FeedLoading = Record<number,boolean>;\n\nexport type FeedError = Record<number,string>;\n\n\nexport class FeedItem {\n    url: string;\n    id: number;\n    newCount?: number;\n    count?: number\n    about?: SiteFeedAbout;\n}\n\nexport class SiteFeedAbout {\n    author: string;\n    description: string;\n    image: string;\n    link: string;\n    title: string;\n    url: string;\n}\n\nexport class SiteFeed {\n    static: string;\n    feed: SiteFeedAbout;\n    items: Post[];\n}\n\nexport class Post {\n    id?: number;\n    title: string;\n    pubDate?: string;\n    link: string;\n    guid: string;\n    author: string;\n    thumbnail: string;\n    description: string;\n    content: string;\n    categories: string[] | any;\n    enclosure: Enclosure;\n    isNew?: boolean;\n}\n\n","export enum TABLES {\n    FEEDS = 'feeds',\n    POSTS = 'posts'\n}\n\nexport const RSS2JSON = 'https://api.rss2json.com/v1/api.json?rss_url=';\n\nexport const DELAY200 = 200;\n\nexport const MAX_POSTS_COUNT = 99;\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n\n@Pipe({\n    name: 'sanitizeHtml'\n})\nexport class SanitizeHtmlPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(v: string): SafeHtml {\n        return this.domSanitizer.bypassSecurityTrustHtml(v);\n    }\n}\n","\n<div class=\"post-header\">\n    <img *ngIf=\"post.thumbnail\"\n        class=\"post-header-thumbnail\"\n        [src]=\"post.thumbnail\" alt=\"thumbnail\">\n    <div class=\"post-header-text\">\n        <small class=\"short-info\">\n            {{shortInfo}}\n        </small>\n        <h3 *ngIf=\"hidden\" (click)=\"hidden = !hidden\" [innerHTML]=\"post.title | sanitizeHtml\"></h3>\n        <h3 *ngIf=\"!hidden\">\n            <a target=\"_blank\" [href]=\"post.link\" [innerHTML]=\"post.title | sanitizeHtml\"></a>\n            <sup> ↗</sup>\n        </h3>\n    </div>\n\n    <button *ngIf=\"hidden\"\n        (click)=\"hidden = !hidden\"\n        [ngClass]=\"{green: post.isNew}\"\n        class=\"ml-auto a-button post-button\">️<img src=\"assets/expand.svg\" alt=\"Expand post\"></button>\n    <button *ngIf=\"!hidden\"\n        (click)=\"hidden = !hidden\"\n        [ngClass]=\"{green: post.isNew}\"\n        class=\"ml-auto a-button post-button\"><img src=\"assets/unexpand.svg\" alt=\"Unexpand post\"></button>\n</div>\n\n<ng-container *ngIf=\"!hidden\">\n    <hr>\n    <div class=\"post-box\">\n        <div [innerHTML]=\"post.content | sanitizeHtml\"></div>\n    </div>\n    <div *ngIf=\"post?.categories?.length\" class=\"small text-muted mb-1\">\n        <em *ngFor=\"let cat of post.categories; let last = last\">{{cat}}<span *ngIf=\"!last\">, </span></em>\n    </div>\n    \n    <div *ngIf=\"post.enclosure?.thumbnail\">\n        <a [href]=\"post.enclosure.link\" *ngIf=\"post.enclosure?.thumbnail\">\n            <img *ngIf=\"post.enclosure.thumbnail\" [src]=\"post.enclosure.thumbnail\" alt=\"thumbnail\">\n        </a>\n        <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n    </div>\n    \n    <div *ngIf=\"isImage\">\n        <img [src]=\"post.enclosure.link\" alt=\"thumbnail\">\n        <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n    </div>\n    \n    <div *ngIf=\"!(post.enclosure?.thumbnail) && post.enclosure?.url\">\n        <a [href]=\"post.enclosure.url\" target=\"_blank\">Enclosure<sup>↗️</sup></a>\n        <div *ngIf=\"post.enclosure?.type\">Type: {{post.enclosure?.type}}</div>\n        <div *ngIf=\"post.enclosure?.length\">Length: {{post.enclosure?.length}}</div>\n    </div>\n</ng-container>\n\n\n<!--<pre *ngIf=\"!hidden\">{{post.enclosure|json}}</pre>-->\n","import {Component, Input} from '@angular/core';\nimport {Post} from '../models';\n\n\n@Component({\n    selector: 'app-post',\n    templateUrl: './post.component.html'\n})\nexport class PostComponent {\n\n    @Input() post: Post = new Post();\n\n\n    hidden = true;\n\n    constructor() {\n    }\n\n    get isImage(): boolean {\n        const typeAsString = this.post?.enclosure?.type || '';\n        return typeAsString?.split('/')?.[0] === 'image';\n    }\n\n    get shortInfo(): string {\n        return [\n            this.post.author,\n            this.post.pubDate,\n            this.readTime\n        ].filter(a => a).join(', ');\n    }\n\n    get readTime(): string {\n        const minutes = Math.round(this.post.content.toString().length / 1500);\n\n        return minutes < 1 ? '' : `⏱ ~${minutes}m`;\n    }\n}\n","<div [ngClass]=\"{'active-actions': displayActions}\">\n    <div class=\"container\">\n        <div class=\"p-1\">\n            <div class=\"top-top-feed\">\n                <button\n                    (click)=\"displayActions = !displayActions\"\n                    class=\"a-button lh-20\">⚙</button>\n                <a routerLink=\"/\" class=\"ml-auto\">\n                    <img width=\"16\" src=\"assets/back.svg\" alt=\"Back to feeds\"> Back to feeds\n                </a>\n            </div>\n\n            <div class=\"mb-2 mt-1\" *ngIf=\"displayActions\">\n                <button (click)=\"deleteFeed()\" class=\"a-button red lh-20 mr-1\">Delete the feed</button>\n                <button (click)=\"removeAllPosts()\"\n                        *ngIf=\"posts.length > 0\"\n                        class=\"a-button red lh-20\">Remove all posts</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container\">\n\n\n    <table class=\"w-100\">\n\n        <tbody>\n            <tr>\n                <td class=\"feed-image\">\n                    <img\n                        onerror=\"this.src='assets/icon-72x72.png'\"\n                        [src]=\"about.image || 'assets/icon-72x72.png'\" alt=\"image\">\n                </td>\n                <td class=\"feed-about\">\n                    <div *ngIf=\"about.title\">\n                        <strong class=\"mr-1\">Title:</strong>\n                        <span>{{about.title}}</span>\n                    </div>\n                    <div *ngIf=\"about.author\">\n                        <strong class=\"mr-1\">Author:</strong>\n                        <span>{{about.author}}</span>\n                    </div>\n                    <div *ngIf=\"about.description\">\n                        <strong class=\"mr-1\">Description:</strong>\n                        <span>{{about.description}}</span>\n                    </div>\n                    <div *ngIf=\"about.link\">\n                        <strong class=\"mr-1\">Link:</strong>\n                        <a target=\"_blank\" href=\"{{about.link}}\">{{about.link}}</a>\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n\n\n\n    <div class=\"post-wrapper\" *ngFor=\"let post of viewPosts; trackBy:identify\">\n        <app-post [post]=post></app-post>\n    </div>\n\n    <div *ngIf=\"viewCount < posts.length\" class=\"feed-line p-1 pb-2\">\n        <button class=\"ml-auto a-button mr-auto\" (click)=\"showMore()\">\n            Show 10 more posts\n        </button>\n    </div>\n    <hr>\n\n    <div class=\"bottom-box\">\n        <img src=\"assets/favicon-32x32.png\">\n    </div>\n\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {debounceTime, map, switchMap, tap, toArray} from 'rxjs/operators';\nimport {NgxIndexedDBService} from 'ngx-indexed-db';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FeedItem, Post, SiteFeedAbout} from '../models';\nimport {concat} from 'rxjs';\nimport {MAX_POSTS_COUNT, TABLES} from '../constants';\n\n\n@Component({\n    selector: 'app-feed',\n    templateUrl: './feed.component.html'\n})\nexport class FeedComponent implements OnInit {\n\n    posts: Post[] = [];\n    displayActions = false;\n    viewCount: number = 10;\n    about: SiteFeedAbout = new SiteFeedAbout();\n    private feedId: number;\n\n    identify = (index: number, post: Post) => post.id;\n\n    constructor(private dbService: NgxIndexedDBService,\n                private router: Router,\n                private route: ActivatedRoute) {\n    }\n\n    get viewPosts(): Post[] {\n        return this.posts.slice(0, this.viewCount);\n    }\n\n    showMore():void {\n        this.viewCount += 10;\n    }\n\n\n    markAsReadFeed(feed: FeedItem): void {\n        this.dbService.update(TABLES.FEEDS, {...feed, newCount: 0}).subscribe();\n    }\n\n    markAsReadPosts(): void {\n        \n        const newPosts$ = this.posts.filter(p => p.isNew)\n            .map(post => this.dbService.update(TABLES.POSTS, {...post, isNew: false}));\n\n        concat(...newPosts$).pipe(toArray()).subscribe();\n    }\n\n    deleteTail(): void {\n        const postForDelete$ = this.posts.slice(MAX_POSTS_COUNT)\n            .map(post => this.dbService.delete(TABLES.POSTS, post.id));\n\n        concat(...postForDelete$).pipe(toArray()).subscribe();\n\n    }\n\n    ngOnInit(): void {\n        this.route.params\n            .pipe(\n                map(params => params.id),\n                tap(id => this.feedId = +id),\n                switchMap(id => this.dbService.getByID(TABLES.FEEDS, +id)),\n                tap((feed: FeedItem) => {\n                    this.markAsReadFeed(feed);\n                    this.about = feed.about;\n                }),\n                switchMap(feed => this.dbService.getAllByIndex(TABLES.POSTS, 'feedId', IDBKeyRange.only(this.feedId))),\n                tap((posts) => this.posts = posts?.reverse() || []),\n                debounceTime(200),\n                tap(() => this.markAsReadPosts()),\n                debounceTime(200),\n                tap(() => this.deleteTail())\n            )\n            .subscribe();\n    }\n\n    deleteFeed(): void {\n        const result = confirm('Remove the feed?');\n        if (result === true) {\n\n            const forDelete$ = [\n                this.dbService.delete(TABLES.FEEDS, this.feedId),\n                ...this.posts.map(post => this.dbService.delete(TABLES.POSTS, post.id))\n            ];\n            concat(...forDelete$).pipe(toArray())\n                .subscribe(() => this.router.navigate(['/']));\n        }\n    }\n\n    removeAllPosts(): void {\n        const result = confirm('Remove all the posts?');\n        if (result === true) {\n            const postForDelete$ = this.posts\n                .map(post => this.dbService.delete(TABLES.POSTS, post.id));\n            concat(...postForDelete$).pipe(toArray())\n                .subscribe(() => this.ngOnInit());\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, concat, Observable, of, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, delay, map, switchMap, tap, toArray } from 'rxjs/operators';\nimport { FeedError, FeedItem, FeedLoading, Post, SiteFeed, SiteFeedAbout } from './models';\nimport { RSS2JSON, TABLES } from './constants';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoreService {\n\n    feedLoading$ = new BehaviorSubject<FeedLoading>({});\n    feedError$ = new BehaviorSubject<FeedError>({});\n\n    constructor(private http: HttpClient, private dbService: NgxIndexedDBService) {\n    }\n\n    setFeedLoading(id: number, isLoadind: boolean) {\n        const feedLoading = this.feedLoading$.getValue();\n        this.feedLoading$.next({...feedLoading, [id]: isLoadind});\n    }\n\n    setFeedError(id: number, isLoadind: string) {\n        const feedError = this.feedError$.getValue();\n        this.feedError$.next({...feedError, [id]: isLoadind});\n    }\n\n    updateFeed(url: string, id: number, about: SiteFeedAbout): void {\n        this.dbService.update(TABLES.FEEDS, { url, id, about });\n    }\n\n    addPosts(posts: Post[], feedId: number, url: string, about: SiteFeedAbout): void {\n        const add$ = (post: Post): Observable<number> => this.dbService\n            .add(TABLES.POSTS, { ...post, feedId, isNew: true })\n            .pipe(catchError(() => of(-1)));\n\n        combineLatest(posts.map(add$))\n            .pipe(\n                switchMap(() => this.dbService.getAllByIndex(TABLES.POSTS, 'feedId', IDBKeyRange.only(feedId))),\n                map(posts => [posts.length, posts.filter(p => p.isNew).length]),\n                map(([count, newCount]) => ({ url, id: feedId, about, count, newCount } as FeedItem))\n            )\n            .subscribe(feedItem => this.dbService.update(TABLES.FEEDS, feedItem));\n    }\n\n    getNewPostsAndUpdateStore(url: string, id: number): Observable<SiteFeed> {\n\n        this.setFeedLoading(id, true);\n\n        return this.http.get<SiteFeed>(encodeURI(`${RSS2JSON}${url}`))\n            .pipe(\n                tap(siteFeed => {\n                    this.addPosts(siteFeed.items.reverse(), id, url, siteFeed.feed);\n                    this.setFeedLoading(id, false);\n                }),\n                catchError(error => {\n                    this.setFeedLoading(id, false);\n                    this.setFeedError(id, error.message || 'Error');\n                    return of(null);\n                })\n            );\n    }\n\n    refreshFeeds(feedItems: FeedItem[]): Observable<SiteFeed[]> {\n        const requests$ = feedItems\n            .map(feedItem => this.getNewPostsAndUpdateStore(feedItem.url, feedItem.id));\n\n        return concat(...requests$).pipe(toArray());\n    }\n\n\n}\n","<div class=\"container mb-3 mt-3\">\n\n    <table class=\"w-100\">\n        <tbody>\n        <tr>\n            <td>\n                <a routerLink=\"/\">\n                    <img alt=\"Stupid RSS Reader logo\" src=\"assets/fur-boot-green.svg\" style=\"width: 5rem\">\n                </a>\n            </td>\n            <td>\n                <h1 class=\"ml-2 app-name\">Stupid RSS Reader</h1>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,248,220,0.5)\">\n    <div class=\"feeds-header\">\n        <h2 class=\"mr-auto\">Feeds</h2>\n        <button class=\"a-button button-share mr-1\" (click)=\"share()\" *ngIf=\"shareIsSuported\" >\n            <img src=\"assets/share.svg\" alt=\"Share feeds\">\n        </button>\n        <button class=\"a-button green\"\n            [disabled]=\"loading\"\n            (click)=\"refreshFeeds()\">\n            Refresh all feeds <span class=\"spinner\" *ngIf=\"loading\"></span>\n        </button>\n    </div>\n\n    <div class=\"feed-line\"\n        *ngFor=\"let feed of feeds; trackBy:identify\"\n        [ngClass]=\"{loading: feedLoading[feed.id]}\">\n        <div class=\"mr-1\">\n            <strong class=\"fit-text\">{{feed.about?.title || 'noname'}}</strong><br>\n            <small class=\"fit-text\">{{feed.url}}</small>\n            <div *ngIf=\"feedError[feed.id]\" style=\"color: #82280c\" class=\"fit-text\">\n                <small>💢 {{feedError[feed.id]}}</small>\n            </div>\n        </div>\n        <div class=\"ml-auto\" style=\"text-align: right;\">\n            <button class=\"a-button button-counter\"\n                    \n                    [disabled]=\"feedLoading[feed.id]\"\n                    [routerLink]=\"['/', feed.id]\">\n                    <span class=\"spinner\" *ngIf=\"feedLoading[feed.id]\"></span>\n                    <span *ngIf=\"!feedLoading[feed.id]\">\n                        <sup class=\"new-info\" *ngIf=\"feed.newCount\">\n                            +{{ feed.newCount }}\n                        </sup>\n                        {{feed.count || '-'}}\n                    </span>\n\n            </button>\n        </div>\n    </div>\n\n    <div *ngIf=\"!addFeedMode\" class=\"mt-1\">\n        <button class=\"a-button lh-20\" (click)=\"addFeedMode=true\">+ add</button>\n    </div>\n    <div>\n        <form *ngIf=\"addFeedMode\" class=\"pure-form pure-form-stacked\">\n            <fieldset>\n                <label for=\"new-feeds\">Enter new feed URLs</label>\n                <textarea class=\"pure-input-1\"\n                    [(ngModel)]=\"rawFeedURLs\"\n                    name=\"rawFeedURLs\"\n                    id=new-feeds\n                    [placeholder]=\"['https://example.com/feed1\\nhttps://example.com/feed2']\"></textarea>\n\n                <button type=\"button\"\n                    (click)=\"addFeeds(rawFeedURLs)\"\n                    class=\"a-button lh-20\">Add to the feeds</button>\n            </fieldset>\n        </form>\n    </div>\n</div>\n\n\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,235,205,0.5);\">\n    <h3>About</h3>\n    <p>I'm tired of different stupid RSS clients and I created own Stupid RSS Reader.</p>\n    <h4>Proxy for RSS</h4>\n    <p>\n        The application must use the proxy <a href=\"https://rss2json.com/\" target=\"_blank\">rss2json.com</a> because CORS restrictions on cross-site requests.\n    </p>\n\n    <h4>Features</h4>\n    <ul>\n        <li>Stupid RSS is <a href=\"https://developers.google.com/web/progressive-web-apps/\" target=\"_blank\">Progressive\n            Web App</a>\n        </li>\n        <li>You can install it to your smartphone</li>\n        <li>Very simple interface</li>\n        <li>Offline mode</li>\n        <li>All user data are stored locally only (<a href=\"https://developer.mozilla.org/ru/docs/Web/API/IndexedDB_API\" target=\"_blank\">IndexedDB</a>)</li>\n        <li>The last 99 posts are stored. Deletion occurs after downloading new ones</li>\n        <li>Open source: <a href=\"https://github.com/gurov/stupid-rss-reader\" target=\"_blank\">Github</a></li>\n    </ul>\n\n</div>\n\n\n<div class=\"container p-1 mb-2\" style=\"background-color:rgba(255,250,240,0.5)\">\n    <h3>Philosophy</h3>\n    <p>The application does not impose anything, but only executes orders.</p>\n</div>\n\n<div class=\"bottom-box\">\n    <img src=\"assets/favicon-32x32.png\" (click)=\"godMode = !godMode\">\n    <button *ngIf=\"godMode\"\n        (click)=\"unregister()\"\n        class=\"a-button red ml-1 lh-20\">Unregister SW</button>\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {FeedComponent} from './feed/feed.component';\nimport {HomeComponent} from './home/home.component';\n\n\nconst routes: Routes = [\n    {\n        path: ':id',\n        component: FeedComponent\n    },\n    {\n        path: '',\n        component: HomeComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {useHash: true})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {NgxIndexedDBService} from 'ngx-indexed-db';\nimport {combineLatest, Subject} from 'rxjs';\nimport {isValidHttpUrl} from '../helpers';\nimport {FeedError, FeedItem, FeedLoading} from '../models';\nimport {TABLES} from '../constants';\nimport {CoreService} from '../core.service';\nimport {takeUntil} from 'rxjs/operators';\nimport {importFeedsFromVersion3} from '../backward-compatibility';\n\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styles: []\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n\n    feeds: FeedItem[] = [];\n    addFeedMode: boolean = false;\n    godMode: boolean = false;\n    rawFeedURLs: string = '';\n    feedLoading: FeedLoading = {};\n    feedError: FeedError = {};\n    loading: boolean = false;\n    private ngUnsubscribe$ = new Subject<void>();\n\n    identify = (index: number, feed: FeedItem) => feed.id;\n\n    constructor(private dbService: NgxIndexedDBService,\n                private coreService: CoreService) {\n    }\n\n    get shareIsSuported(): boolean {\n        return !!navigator.share;\n    }\n\n    addFeeds(rawFeedStrings: string): void {\n        this.addFeedMode = false;\n        this.rawFeedURLs = '';\n        const newFeeds$ = rawFeedStrings\n            .split('\\n')\n            .map(s => s.trim())\n            .filter(s => s)\n            .filter(s => isValidHttpUrl(s))\n            .map(url => this.dbService.add(TABLES.FEEDS, {url}));\n\n        combineLatest(newFeeds$)\n            .subscribe(() => this.load());\n    }\n\n    refreshFeeds(): void {\n        this.loading = true;\n        this.feedError = {};\n        this.coreService.refreshFeeds(this.feeds)\n            .subscribe(() => {\n                this.loading = false;\n                this.load();\n            });\n    }\n\n    share(): void {\n        navigator.share?.({\n            title: 'Stupid RSS',\n            text: this.feeds.map(f => f.url).join(' \\n'),\n            url: location.href,\n        }); // share the URL of MDN\n    }\n\n    load(): void {\n        this.dbService.getAll(TABLES.FEEDS)\n            .subscribe(feeds => this.feeds = feeds);\n    }\n\n    ngOnInit(): void {\n        this.coreService.feedLoading$\n            .pipe(takeUntil(this.ngUnsubscribe$))\n            .subscribe(feedLoading => {\n                this.feedLoading = feedLoading;\n                this.load();\n            });\n\n        this.coreService.feedError$\n            .pipe(takeUntil(this.ngUnsubscribe$))\n            .subscribe(feedError => {\n                this.feedError = feedError;\n                this.load();\n            });\n\n        this.load();\n\n        // import from the old version\n        try {\n            this.addFeeds(importFeedsFromVersion3());\n        } catch (error) {\n        }\n\n\n    }\n\n    unregister(): void {\n        const result = confirm('Unregister the Service Worker?');\n        if (result === true) {\n            navigator.serviceWorker?.getRegistrations().then((registrations) => {\n                for (const registration of registrations) {\n                    registration.unregister();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n\n}\n","export const isValidHttpUrl = (s: string) => {\n    let url;\n\n    try {\n        url = new URL(s);\n    } catch (_) {\n        return false;\n    }\n\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n}","export function importFeedsFromVersion3(): string {\n    const feedListSource = localStorage.getItem('feedList');\n    localStorage.removeItem('feedList');\n    try {\n        return JSON.parse(feedListSource).join('\\n');\n    } catch (error) {\n        return '';\n    }\n}","import {Component} from '@angular/core';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    title = 'stupid-rss-reader';\n}\n","<div>\n    <router-outlet></router-outlet>\n</div>\n","export const environment = {\n    production: true\n};\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { DBConfig, NgxIndexedDBModule } from 'ngx-indexed-db';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FeedComponent } from './feed/feed.component';\nimport { HomeComponent } from './home/home.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { SanitizeHtmlPipe } from './pipes/sanitize-html.pipe';\nimport { FormsModule } from '@angular/forms';\nimport { PostComponent } from './post/post.component';\nimport { CountPipe } from './pipes/count.pipe';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { TABLES } from './constants';\n\nexport function migrationFactory() {\n    return {\n        2: (db, transaction) => {\n            const store = transaction.objectStore(TABLES.FEEDS);\n            store.createIndex('newPostIds', 'newPostIds', { unique: false });\n            store.createIndex('postIds', 'postIds', { unique: false });\n        }\n    };\n};\n\nconst dbConfig: DBConfig = {\n    name: 'Stupid-RSS-Reader',\n    version: 2,\n    objectStoresMeta: [\n        {\n            store: TABLES.POSTS,\n            storeConfig: { keyPath: 'id', autoIncrement: true },\n            storeSchema: [\n                { name: 'title', keypath: 'title', options: { unique: false } },\n                { name: 'feedId', keypath: 'feedId', options: { unique: false } },\n                { name: 'pubDate', keypath: 'pubDate', options: { unique: false } },\n                { name: 'link', keypath: 'link', options: { unique: false } },\n                { name: 'guid', keypath: 'guid', options: { unique: true } },\n                { name: 'author', keypath: 'author', options: { unique: false } },\n                { name: 'thumbnail', keypath: 'thumbnail', options: { unique: false } },\n                { name: 'description', keypath: 'description', options: { unique: false } },\n                { name: 'content', keypath: 'content', options: { unique: false } },\n                { name: 'categories', keypath: 'categories', options: { unique: false } },\n                { name: 'enclosure', keypath: 'enclosure', options: { unique: false } },\n                { name: 'isNew', keypath: 'isNew', options: { unique: false } }\n            ]\n        },\n        {\n            store: TABLES.FEEDS,\n            storeConfig: { keyPath: 'id', autoIncrement: true },\n            storeSchema: [\n                { name: 'url', keypath: 'url', options: { unique: true } },\n                { name: 'about', keypath: 'about', options: { unique: false } },\n                { name: 'newCount', keypath: 'newCount', options: { unique: false } },\n                { name: 'count', keypath: 'count', options: { unique: false } },\n            ]\n        }\n    ],\n    migrationFactory    \n};\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        FeedComponent,\n        PostComponent,\n        CountPipe,\n        SanitizeHtmlPipe\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        RouterModule,\n        AppRoutingModule,\n        NgxIndexedDBModule.forRoot(dbConfig),\n        ServiceWorkerModule.register('/stupid-rss-reader/ngsw-worker.js', { enabled: environment.production })\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}